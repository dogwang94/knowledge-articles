
name: GitHub and Slack

on:
  issues:
    types: [opened, closed]
  workflow_dispatch:
env:
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ID }}
  GITHUB_REPO_OWNER: ${{ secrets.KA_GITHUB_REPO_OWNER }}
  GITHUB_REPO_NAME: ${{ secrets.KA_GITHUB_REPO_NAME }}
  SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
  SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}

jobs:
  searchKeyword:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Search for keyword
      if: github.event_name == 'issues' && github.event.action == 'opened'
      id: search
      run: |
        keyword=$(echo "${{ github.event.issue.title }}" | awk '{print tolower($0)}')
        echo "Searching for directories name containing $keyword"
        readarray -t dirs <<< "$(find . -iname "*$keyword*" -type d -path '*/pages/*' -print0 | xargs -0)"
        echo "Found directories: ${dirs[@]}"
        echo "::set-output name=dirnames::${dirs[@]}"

    - name: Generate Slack Message
      id: generate_message
      if: github.event_name == 'issues' && github.event.action == 'opened'
      run: |
        formatted_dirs=$(echo "${{ steps.search.outputs.dirnames }}" | sed 's/ /\n/g' | sed 's/^/"/' | sed 's/$/"/' | paste -sd ' ' -)
        echo "The link of knowledge articles:"
        messages=()
        for dir in $formatted_dirs; do
          dir=$(basename "$dir" | sed 's/\"//g')
          message="https://probable-dollop-19qk3nl.pages.github.io/pages/$dir/$dir"
          messages+=("$message")
        done
        message="${messages[*]}"
        echo "Found message: $message"
        echo "::set-output name=message::$message"
      env:
        pythonLocation: /opt/hostedtoolcache/Python/3.11.3/x64
        LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.3/x64/lib
     
    - name: Get Thread Timestamp
      id: get_thread_timestamp
      run: |
        thread_timestamp=$(python app.py get_thread_timestamp ${{ github.event.issue.number }} ${{ secrets.KA_GITHUB_REPO_OWNER }} ${{ secrets.KA_GITHUB_REPO_NAME }}) &
        echo "Thread timestamp: $thread_timestamp"
        echo "::set-output name=thread_timestamp::$thread_timestamp"
        
    - name: Run Flask Application
      run: |
        python -c "from app import run_app; run_app()"
        
    - name: Send App Bot Notification to Slack Thread
      if: steps.get_thread_timestamp.outputs.thread_timestamp != 'None'
      run: |
        echo "KA_GITHUB_REPO_OWNER: $GITHUB_REPO_OWNER"
        echo "KA_GITHUB_REPO_NAME: $GITHUB_REPO_NAME"
        echo "SLACK_BOT_TOKEN: $SLACK_BOT_TOKEN"
        echo "SLACK_CHANNEL_ID: $SLACK_CHANNEL_ID"
        echo "SLACK_SIGNING_SECRET: $SLACK_SIGNING_SECRET"
        echo "Thread timestamp: ${{ steps.get_thread_timestamp.outputs.thread_timestamp }}"
        python app.py send_notification_to_slack ${{ github.event.issue.number }} ${{ secrets.KA_GITHUB_REPO_OWNER }} ${{ secrets.KA_GITHUB_REPO_NAME }}
        
      
    - name: Send KA Notification
      if: github.event_name == 'issues' && github.event.action == 'opened' && steps.search.outputs.dirnames != ''
      uses: partnerhero/action-webhook-slack-notify@v2.1.0
      env:
        SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ID }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON_EMOJI: ":information_desk_person:"
        SLACK_MESSAGE: "*Link of Knowledge Articles:\n * ${{ steps.generate_message.outputs.message }}\n"
        SHOW_ACTIONS_URL: false
        SHOW_REF: false
        SHOW_EVENT: false
        SLACK_THREAD_TS: ${{ env.THREAD_TS }} 
        
  closeIssue:
    needs: searchKeyword
    runs-on: ubuntu-latest
    steps: 
      - name: Close Issue
        id: closeIssue
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          TOKEN="${{ secrets.KA_GITHUB_TOKEN }}"
          REPO_OWNER="${{ secrets.KA_GITHUB_REPO_OWNER }}"
          REPO_NAME="${{ secrets.KA_GITHUB_REPO_NAME }}"
                  
          API_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues/$ISSUE_NUMBER"
                  
          # Close the issue
          curl -X PATCH -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{"state": "closed"}' \
            $API_URL
                    
          # Add a comment
          curl -X POST -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{"body": "This issue has been closed."}' \
            $API_URL/comments
    
